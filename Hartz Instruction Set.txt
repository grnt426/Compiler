Byte: 7 bits
Word: One Byte
A Single rotation is One Word

Two Registers:
Register One: $1 (1)
Register Two: $2 (2)

Single ALU Input Operation Source Limitations:
Source Range		: $1

Multi ALU Input Operation Source Range:
Source Range		: $1/$2
Source 2 Range		: $1/$2

ALU Ouput Result Destination Range:
Destination Range	: $1/$2

ALU Instructions:
	NOT <000>
	SHL <001>
	SHR <010>
	OR  <011>
	AND <100>
	ADD <101>
	BEZ <No_Selector_Needed>

Instruction Set:
	- NOT 	<0000>
		- Two's complement
		- not $source, $dest
	- SHL 	<0001>
		- Binary shift left
		- shl $source, $dest
	- SHR 	<0010>
		- Binary shift right
		- shr $source, $dest
	- OR 	<0011>
		- Binary OR
		- or $source, $source2, $dest
	- AND 	<0100>
		- Binary AND
		- and $source, $source2, $dest
	- ADD 	<0101>
		- Add
		- add $source, $source2, $dest
	- SW 	<0110>
		- Store word to data ring
		- sw $source
	- LW 	<0111>
		- Load word from data ring
		- lw $dest
	- BEZ 	<1000>
		- Branch if equal to zero
		- beq $source
			- True: Right
			- False: Read current instruction
	- ROT 	<10010(0/1)>
		- Rotates Data Ring
		- rot $countReg (bit 7 is register, bit 6 = 1)
			- rotates by the specified value in the register
		- rot (bit 6 = 0)
			- implicitly rotates once
	- LROT	<10011(0/1)>
		- Rotates Data Ring by amount in next value on text ring
		- lrot $multiplier_reg (bit 7 is register, bit 6 = 1)
			- applies multiplier, then loads and performs rotate
		- lrot (bit 7 ignored, bit 6 = 0)
			- apply no multiplier
	- LJMP 	<1010>
		- Specifies that the next instruction is to be made a longer jump
		- ljmp !multiplier
	- JMP	<1011>
		- The literal value to rotate by 
	- NA 	<1100>
	- NA 	<1101>
	- HLT 	<11110>
		- Halt execution
	- NOP 	<11111>
		- No Operation
		- does nothing
	- LFSJ	<111101>
		- Load From, Substract, and Jump
		- Loads the current value pointed at on the data ring, 
			subtracts from next value on text ring, stores to jump register,
			and jumps.
		- Used to return from a function call.
	- STJ	<1111110>
		- Store To, and Jump
		- Stores to the data ring the next value on the text ring, then stores
			value after that in the jump register and jumps.
		- Used to make a function call.

Program Execution:
	- Load instruction from text ring
	- Rotate text ring right 1
	- Execute instruction
	
Example Hartz Code :: Machine Code
add $0 $1 $0
	0101010
not $0 $0
	0000000 (last bit ignored/unused)
bez $1
	1000100 (last two bits ignored/unused)
hlt
	1111000 (last three bits ignored/unused)
	
Higher Level Instruction Breakdown:
	- Comparing Two Numbers:
		NOT $0, $0
		ADD $0, $1, $0 (assuming the number one is stored in $1)
			Alternatively:
			ADDI $0, 1, $0 #where one is some immediate value
		ADD $0, $1, $0 (assuming the number you want to add to is now stored in $1)
		BEZ $0
	- Functions:
		- Calling:
		
			# Preserve Register Stack
			SW 	$0 	(assuming sitting at desired location for storage, also assuming any registers are needed
			ROT $0 	(assuming $0 has some value to store the next register, assuming the second register is needed)
				Alternatively:
				ROT 	(implicit rotate right by ONE)
				ROT 1 	(where one is some immediate value)
			SW	$1 	(assuming this is needed)
			
			# Load amount to rotate to function
			
			
			# Actual Call to Jump to Function
			JMP $0
		- Function:
			# Code
				...
				...
		- Returning:
		
			# Jump Back
			ROT X	
				- The amount to get to the data value stored to find the
					amount to rotate by to get back
			LW $0
			JMP $0
		
		- Cleaning Up:
			ROT Y
				- amount to return to stored register stack (assuming start is
				location return jump is stored
			LW 	$0
			ROT $0 (assuming $0 has some value to get to the position of the next register, if needed)
				Alteratively:
				ROT 	(implicit rotate right by ONE)
				ROT 1 	(where one is some immediate value)
			LW $1
		
	
